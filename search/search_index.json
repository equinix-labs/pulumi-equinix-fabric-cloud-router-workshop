{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#about-equinix-labs","title":"About Equinix Labs","text":"<p>Equinix Labs offers workshops, proof of concepts, and tools for exploring and bootstrapping Equinix digital infrastructure including Fabric, Metal, and Network Edge.</p>"},{"location":"#about-the-workshop","title":"About the workshop","text":"<p>Welcome to the workshop on provisioning Equinix infrastructure using Pulumi. Throughout this workshop, we will explore the capabilities of Pulumi, leveraging its versatility through multi-language and multi-cloud support. Our demonstration will focus on utilizing a Pulumi template written in Python to establish a private connection from a new Equinix Fabric Cloud Router to Google Cloud Platform (GCP). We will utilize the Pulumi providers for Equinix and GCP.</p> <p>In this workshop, we'll seamlessly take advantage of a cloud provider SDK to use capabilities not present in the corresponding Terraform or Pulumi providers offered by the cloud provider.</p> <p>The goals of this workshop are:</p> <ul> <li>How to use Pulumi and Equinix together</li> <li>Defining and deploying Equinix resources using popular programming languages</li> <li>Establishing a private interconnection to a Cloud Service Provider</li> <li>How to extend the functionality of Pulumi providers</li> </ul>"},{"location":"#workshop-agenda","title":"Workshop agenda","text":"<p>This workshop is split into four parts:</p> Part Title Duration 1 Setup 15 minutes 2 Configuration 15 minutes 3 Infrastructure Overview 10 minutes 4 Conclusion 5 minutes"},{"location":"parts/conclusion/","title":"Conclusion","text":""},{"location":"parts/conclusion/#conclusion","title":"Conclusion","text":"<p>Thank you for participating in the workshop! Let's recap some of the key takeways that we've learned:</p> <ul> <li>We have explored how to provision Equinix infrastructure using Pulumi, harnessing its flexibility and power</li> <li>We've learned how to overcome limitations in providers by integrating with external APIs and SDKs, thereby extending the automation capabilities of Pulumi.</li> <li>Additionally, we've highlighted that while this example utilizes Python, similar outcomes can be achieved with any of the other supported languages (Java, .NET, TypeScript, Go).</li> <li>By embracing tools like Pulumi, we empower ourselves to streamline and automate our infrastructure deployment processes efficiently.</li> </ul>"},{"location":"parts/conclusion/#next-steps","title":"Next Steps","text":"<ul> <li>As a next step, we encourage exploring the integration of Equinix Fabric Cloud Router with other cloud service providers to further unlock its potential. By adding interconnections to additional cloud environments, such as Microsoft Azure or Amazon Web Services (AWS), you can evaluate the agility and efficiency of Equinix Fabric in facilitating cross-cloud traffic routing without the need for additional configuration.</li> </ul> <p>In the Equinix Fabric Cloud Router (FCR) Multi-cloud with Pulumi workshop, AWS services are added to the concepts and resources introduced in this workshop.</p>"},{"location":"parts/conclusion/#resources","title":"Resources","text":"<p>Here are a few other resources to look at to continue your Equinix Fabric journey:</p> <ul> <li>Deploy @ Equinix: A one-stop shop for blogs, guides, and plenty of other resources.</li> <li>Equinix Fabric Docs: Equinix Fabric official documentation.</li> <li>Equinix Labs: Provides SDKs and Pulumi modules for Infrastructure as Code tools.</li> <li>Equinix Community: A global community for customers and Equinix users.</li> </ul>"},{"location":"parts/configuration/","title":"2. Configuration and Provisioning","text":""},{"location":"parts/configuration/#part-2-configuration-and-provisioning","title":"Part 2: Configuration and Provisioning","text":""},{"location":"parts/configuration/#steps","title":"Steps","text":""},{"location":"parts/configuration/#1-create-a-yaml-file-with-the-required-configuration-parameters-for-our-pulumi-template","title":"1. Create a YAML file with the required configuration parameters for our Pulumi template","text":"<p>Before deploying our infrastructure, we need to define the necessary configuration parameters. These parameters might include authentication details, resource names, networking settings, and any other custom configurations required by our Pulumi template.</p> <p>You can use both the CLI and the programming model for your Pulumi configuration. The key-value pairs for any given stack are stored in your project\u2019s stack settings file, which is automatically named <code>Pulumi.&lt;stack-name&gt;.yaml</code>. This YAML file acts as the input for our deployment process, ensuring that our infrastructure is provisioned with the correct specifications.</p> <p>There are several parameters that must can be configured to use this template:</p> <ul> <li><code>accountNum</code> - (String) your Fabric account number</li> <li><code>projectId</code> - (String) your Fabric project UUID</li> <li><code>gcpProject</code> - (String) your Google Cloud project name</li> <li><code>notification_emails</code> - (Object) List of contact emails</li> </ul> <p>The command needed is <code>pulumi config set &lt;key&gt; [value]</code></p> Bash<pre><code>$ pulumi config set accountNum 1234\n$ pulumi config set projectId 5678\n$ pulumi config set gcpProject myGCPProject\n$ pulumi config set --path 'notification_emails[0]' example@equinix.com\n</code></pre> <p>After that you will have a new file <code>Pulumi.&lt;stack-name&gt;.yaml</code> in your project. If for example your stack is called <code>equinixstack</code> and the project <code>workshop</code>, it will look like this:</p> Bash<pre><code>$ cat Pulumi.equinixstack.yaml\n\nconfig:\n  workshop:accountNum: \"1234\"\n  workshop:projectId: \"5678\"\n  workshop:gcpProject: \"myGCPProject\"\n  workshop:notification_emails:\n    - example@equinix.com\n</code></pre>"},{"location":"parts/configuration/#3-execute-pulumi-up-to-deploy-our-infrastructure","title":"3. Execute pulumi up to deploy our infrastructure","text":"<p>Now that our project is configured and dependencies are installed, we're ready to deploy our infrastructure using Pulumi. We'll execute the <code>pulumi up</code> command, which initiates the deployment process based on the configurations provided in our YAML file. Pulumi will orchestrate the creation of Equinix resources, establish connections with GCP, and configure the networking settings according to our specifications.</p> Bash<pre><code>$ pulumi up\n</code></pre>"},{"location":"parts/configuration/#4-verify-that-everything-is-configured-correctly-upon-deployment","title":"4. Verify that everything is configured correctly upon deployment","text":"<p>Upon completion of the deployment process, we'll validate that our infrastructure has been provisioned correctly. We'll use the Equinix portal to verify that all Equinix resources are created as expected, the connection to GCP is established, and the Fabric Cloud Router configurations, including the BGP session, are properly configured. This validation step ensures that our infrastructure is ready for use and meets our desired specifications.</p>"},{"location":"parts/configuration/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>Considering Pulumi's support for multi-cloud deployments, how would you adapt the configuration and provisioning process to deploy infrastructure across multiple cloud providers simultaneously?</li> </ul>"},{"location":"parts/infrastructure_overview/","title":"3. Infrastructure Overview","text":""},{"location":"parts/infrastructure_overview/#part-3-infrastructure-overview","title":"Part 3: Infrastructure Overview","text":"<p>Now that we have successfully configured and provisioned our infrastructure using Pulumi, let's take a closer look at the components we deployed and their functionalities.</p>"},{"location":"parts/infrastructure_overview/#resources","title":"Resources","text":""},{"location":"parts/infrastructure_overview/#1-equinix-fabric-cloud-router-fcr","title":"1. Equinix Fabric Cloud Router (FCR):","text":"<p>The Equinix Fabric Cloud Router is an on-demand, easy-to-deploy virtual routing service on Equinix Fabric that establishes flexible, private Layer 3 connectivity between public clouds, collocation, and other Equinix services across our software-defined global network. With these features, you can route traffic across your multicloud network more efficiently and at scale to achieve optimal performance, security, and control.</p>"},{"location":"parts/infrastructure_overview/#2-equinix-fabric-connection-to-google-cloud-platform-gcp","title":"2. Equinix Fabric Connection to Google Cloud Platform (GCP):","text":"<p>Leveraging Equinix Fabric's direct and private interconnection capabilities, we established a secure connection from our Equinix infrastructure to Google Cloud Platform (GCP). This private connection ensures low-latency and high-bandwidth connectivity, ideal for mission-critical workloads and data transfer between our Equinix environment and GCP services.</p>"},{"location":"parts/infrastructure_overview/#3-google-cloud-router","title":"3. Google Cloud Router:","text":"<p>In addition to the Equinix Fabric Cloud Router, we deployed a Google Cloud Router within GCP. The Google Cloud Router is responsible for dynamically exchanging routing information with our Equinix Fabric Cloud Router via the Border Gateway Protocol (BGP). This dynamic routing enables efficient traffic routing and ensures seamless connectivity between our Equinix infrastructure and resources hosted on GCP.</p>"},{"location":"parts/infrastructure_overview/#4-google-cloud-vlan-attachment-interconnect","title":"4. Google Cloud VLAN Attachment (Interconnect):","text":"<p>To facilitate the private connection between our Equinix infrastructure and GCP, we established a VLAN attachment (Interconnect) within GCP. This VLAN attachment serves as the physical link between our Equinix Fabric Cloud Router and the Google Cloud Router, allowing for high-speed and reliable data transfer between the two environments.</p>"},{"location":"parts/infrastructure_overview/#5-equinix-fabric-routing-protocol","title":"5. Equinix Fabric Routing Protocol:","text":"<p>Our Pulumi template includes networking configurations that govern the communication pathways and traffic flow within our infrastructure. This includes settings such as IP addressing, peering, BGP and ASN. BGP is a dynamic routing protocol that enables the exchange of routing information between autonomous systems, ensuring optimal path selection and routing efficiency across our interconnected network.</p>"},{"location":"parts/infrastructure_overview/#5-cloudrouterpeerconfig-custom-pulumi-component-resource","title":"5. CloudRouterPeerConfig (Custom Pulumi Component Resource):","text":"<p>In addition to the infrastructure components mentioned earlier, we have also implemented a custom Pulumi Component Resource to extend the functionality of the Google Cloud Platform (GCP) provider. This custom resource addresses a specific limitation in the GCP provider related to Partner Interconnect Connections and the automatic creation of BGP sessions in Google Cloud Router.</p> <ul> <li>Purpose and Functionality:</li> </ul> <p>The custom Pulumi Component Resource has been developed to automate the configuration of BGP peer parameters, specifically the Partner ASN, in Google Cloud Router. When setting up a Partner Interconnect Connection with GCP, the BGP session is automatically created in the Google Cloud Router. However, the RouterPeer resource available in the classic GCP Pulumi provider does not support updating autogenerated configurations.</p> <ul> <li>Implementation Approach:</li> </ul> <p>To address this limitation, we opted to implement a custom Pulumi Component Resource using the Google Python SDK. By leveraging the SDK, we gain granular control over the BGP peer configuration and can programmatically update the autogenerated parameters, such as the Partner ASN, as part of the deployment process.</p> <ul> <li>Benefits of Component Resource:</li> </ul> <p>Using a Component Resource instead of a standalone function provides several advantages. It allows us to encapsulate the logic for managing the lifecycle of the custom resource within our Pulumi project. This includes handling resource creation, updates, and deletion, ensuring consistent behavior and reliability throughout the deployment process.</p> <ul> <li>Integration with Pulumi Workflow:</li> </ul> <p>The custom Pulumi Component Resource seamlessly integrates with the overall Pulumi workflow, enabling automated deployment of the extended GCP functionality alongside other infrastructure components. This streamlines the provisioning process and ensures that the BGP peer parameters are correctly configured without manual intervention.</p>"},{"location":"parts/infrastructure_overview/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>How would you design the infrastructure to achieve high availability and redundancy, minimizing the risk of downtime or service disruptions?</li> <li>Beyond Google Cloud Platform, are there any other cloud providers or services you envision integrating with the Equinix infrastructure in the future?</li> </ul>"},{"location":"parts/setup/","title":"1. Setup","text":""},{"location":"parts/setup/#part-1-setup","title":"Part 1: Setup","text":"<p>To run this workshop you will need access to an Equinix Fabric Account or create a new one following step 1 below.</p> <p>Note:  You are responsible for the cost of resources created in your Equinix Fabric account while running this workshop.</p>"},{"location":"parts/setup/#pre-requisites","title":"Pre-requisites","text":"<p>The following tools will be needed on your local development environment where you will be running most of the commands in this guide.</p> <ul> <li>pulumi</li> <li>python</li> <li>Optional (but recommended): Google Cloud CLI</li> </ul>"},{"location":"parts/setup/#steps","title":"Steps","text":""},{"location":"parts/setup/#1-create-equinix-fabric-credentials-access-token","title":"1. Create Equinix Fabric credentials - Access Token","text":"<p>If you have never used Equinix Fabric API before, please follow the Getting Access Token instructions.</p>"},{"location":"parts/setup/#2-configure-google-cloud-credentials-if-installed","title":"2. Configure Google Cloud credentials (if installed)","text":"<p>Pulumi can authenticate to Google Cloud via several methods: Google Cloud CLI, OpenID Connect (OIDC), Service account. Whether you choose to use the CLI or another method, please follow the Installation &amp; Configuration instructions.</p>"},{"location":"parts/setup/#2-clone-the-template-repository","title":"2. Clone the template repository","text":"<p>To create a Pulumi project from a specific source control location, you need to pass the url to the <code>pulumi new</code> command:</p> Bash<pre><code>$ pulumi new https://github.com/equinix-labs/pulumi-equinix-fabric-cloud-router-gcp\n</code></pre> <p>This command not only will download the template but will walk you through creating a new Pulumi project, creating a new Pulumi stack, will create a python virtual environment and install the dependencies defined in the repository requirements.txt file.</p>"},{"location":"parts/setup/#3-verify","title":"3. Verify","text":"<p>If everything worked correctly, the output should look like this:</p> Bash<pre><code>Finished installing dependencies\n\nYour new project is ready to go! \u2728\n\nTo perform an initial deployment, run `pulumi up`\n\nwarning: A new version of Pulumi is available. To upgrade from version '3.100.0' to '3.111.1', run \n   $ curl -sSL https://get.pulumi.com | sh\nor visit https://pulumi.com/docs/install/ for manual instructions and release notes.\n</code></pre>"},{"location":"parts/setup/#discussion","title":"Discussion","text":"<p>Before proceeding to the next part let's take a few minutes to discuss what we did. Here are some questions to start the discussion.</p> <ul> <li>In what scenarios do you believe the limitations of Pulumi providers, as highlighted in the introduction, might pose significant challenges during real-world infrastructure deployments? How might you mitigate these challenges?</li> </ul>"}]}